{"version":3,"sources":["api/todolists-api.ts","utils/error-utils.ts","features/login/ayth-reducer.ts","app/app-reducer.ts","features/todolists/tasks-reducer.ts","features/todolists/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/todolists/Todolist/Task/Task.tsx","features/todolists/Todolist/Todolist.tsx","feature/todolists/Todolist/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/login/Login.tsx","app/App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","todolistId","taskId","taskTitile","model","put","authAPI","data","handleServerNetworkError","dispatch","message","setAppErrorAC","setAppStatusAC","handleServerAppError","messages","length","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","error","isInitialized","fetchTasksTC","then","res","tasks","setTasksAC","items","clearTodosDataAC","AddItemForm","React","memo","props","useState","setTitle","setError","addItem","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","key","label","helperText","disabled","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","onDoubleClick","Task","onClickHandler","useCallback","removeTask","task","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","className","Checkbox","Delete","Todolist","useDispatch","useEffect","addTask","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","t","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","auth","todos","forEach","tl","removeTaskAC","removeTaskTC","resultCode","item","catch","err","addTaskTC","changeStatus","getState","currentTask","find","description","priority","startDate","deadline","changeTaskStatusAC","updateTaskStatusTC","action","changeTodoEntityStatusAC","removeTodolistAC","deleteTodolistTC","changeTodolistTitle","changeTodolistTitleAC","addTodolist","todolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","name","getFieldProps","touched","FormControlLabel","control","App","finally","AppBar","position","LinearProgress","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","exact","path","render","fontSize","textAlign","from","top","width","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","todoListId","copyState","stateCopy","store","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f31405ee.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '166851b3-7375-4be8-b4af-b74c8e305892'\r\n    }\r\n})\r\n\r\n//api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId: number }>>(`auth/login`, data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<ResponseMeDataType>>('auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n}\r\n\r\n\r\n//types\r\nexport type ResponseMeDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}","import {setAppErrorAC, SetAppErrorACType, setAppStatusAC, SetAppStatusACType} from \"../app/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ResponseType} from \"../api/todolists-api\";\r\n\r\nexport const handleServerNetworkError = (dispatch: Dispatch<ErrorUtilsActionType>, message: string) => {\r\n    dispatch(setAppErrorAC(message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerAppError = <T>(dispatch: Dispatch<ErrorUtilsActionType>, data: ResponseType<T>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('неизвестная ошибка'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\n//types\r\ntype ErrorUtilsActionType = | SetAppErrorACType | SetAppStatusACType","import {Dispatch} from 'redux'\r\nimport {SetAppErrorACType, setAppStatusAC, SetAppStatusACType} from \"../../app/app-reducer\";\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {ClearDataActionType, clearTodosDataAC} from \"../todolists/todolists-reducer\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data).then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setIsLoggedInAC(true))\r\n        } else {\r\n            handleServerAppError(dispatch, res.data)\r\n        }\r\n    })\r\n        .catch((err) => handleServerNetworkError(dispatch, err.message))\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout().then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setIsLoggedInAC(false))\r\n            dispatch(clearTodosDataAC())\r\n        } else {\r\n            handleServerAppError(dispatch, res.data)\r\n        }\r\n    })\r\n        .catch((err) => handleServerNetworkError(dispatch, err.message))\r\n}\r\n\r\n// types\r\nexport type setIsLoggedInACType = ReturnType<typeof setIsLoggedInAC>\r\ntype ActionsType = setIsLoggedInACType | SetAppStatusACType | SetAppErrorACType | ClearDataActionType","import {authAPI} from \"../api/todolists-api\"\r\nimport {Dispatch} from \"redux\";\r\nimport {setIsLoggedInAC, setIsLoggedInACType} from \"../features/login/ayth-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as null | string,\r\n    isInitialized: false,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET_STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET_ERROR':\r\n            return {...state, error: action.error}\r\n        case \"APP/SET_IS_INITIALIZED\":\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET_STATUS', status} as const)\r\nexport const setAppErrorAC = (error: null | string) => ({type: 'APP/SET_ERROR', error} as const)\r\nexport const setIsInitializedAC = (isInitialized: boolean) => ({type: 'APP/SET_IS_INITIALIZED', isInitialized} as const)\r\n\r\n//thunks\r\nexport const initializeAppTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setIsLoggedInAC(true));\r\n        } else {\r\n            handleServerAppError(dispatch, res.data)\r\n        }\r\n    })\r\n        .catch((err) => handleServerNetworkError(dispatch, err.message))\r\n        .finally(() => {\r\n            dispatch(setIsInitializedAC(true))\r\n        })\r\n}\r\n\r\n//types\r\nexport type isInitializedACType = ReturnType<typeof setIsInitializedAC>\r\nexport type SetAppErrorACType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusACType = ReturnType<typeof setAppStatusAC>\r\ntype ActionsType = setIsLoggedInACType | SetAppStatusACType | SetAppErrorACType | isInitializedACType","import {TasksStateType} from '../../app/App';\r\nimport {TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {\r\n    AddTodolistActionType,\r\n    ClearDataActionType,\r\n    RemoveTodolistActionType,\r\n    SetTodolistsACType\r\n} from './todolists-reducer';\r\nimport {\r\n    SetAppErrorACType,\r\n    setAppStatusAC,\r\n    SetAppStatusACType\r\n} from \"../../app/app-reducer\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'CHANGE-TASK-STATUS':\r\n            return {\r\n                ...state, [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, status: action.status} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        case \"CLEAR_DATA\":\r\n            return {}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//action\r\nexport const removeTaskAC = (taskId: string, todolistId: string,) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string) =>\r\n    ({type: 'CHANGE-TASK-STATUS', status, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n//Thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            dispatch(setTasksAC(res.data.items, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\nexport const removeTaskTC = (todolistId: string, id: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.deleteTask(todolistId, id)\r\n        .then(() => {\r\n            dispatch(removeTaskAC(id, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title).then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(addTaskAC(res.data.data.item))\r\n        } else {\r\n            handleServerAppError(dispatch, res.data)\r\n        }\r\n    })\r\n        .catch((err) => handleServerNetworkError(dispatch, err.message))\r\n}\r\n\r\nexport const updateTaskStatusTC = (todolistId: string, taskId: string, status: TaskStatuses) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const allTasks = state.tasks\r\n        const tasksForClickedTodo = allTasks[todolistId]\r\n        const currentTask = tasksForClickedTodo.find((task) => {\r\n            return task.id === taskId\r\n        })\r\n        if (currentTask) {\r\n            let model: UpdateTaskModelType = {\r\n                title: currentTask.title,\r\n                status: status,\r\n                description: currentTask.description,\r\n                priority: currentTask.priority,\r\n                startDate: currentTask.startDate,\r\n                deadline: currentTask.deadline,\r\n            }\r\n            dispatch(setAppStatusAC('loading'))\r\n            todolistsAPI.updateTask(todolistId, taskId, model).then(() => {\r\n                    dispatch(changeTaskStatusAC(taskId, status, todolistId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                }\r\n            )\r\n        }\r\n\r\n    }\r\n//types\r\ntype ActionsType =\r\n    | ClearDataActionType\r\n    | SetAppErrorACType\r\n    | SetAppStatusACType\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | SetTodolistsACType\r\n    | ReturnType<typeof changeTaskStatusAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof setTasksAC>","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {\r\n    RequestStatusType,\r\n    setAppErrorAC,\r\n    SetAppErrorACType,\r\n    setAppStatusAC,\r\n    SetAppStatusACType\r\n} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {fetchTasksTC} from \"./tasks-reducer\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'CHANGE_TODOLIST_ENTITY_STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case \"CLEAR_DATA\":\r\n            return []\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//action\r\nexport const changeTodoEntityStatusAC = (entityStatus: RequestStatusType, id: string) =>\r\n    ({type: 'CHANGE_TODOLIST_ENTITY_STATUS', entityStatus, id} as const)\r\nexport const removeTodolistAC = (id: string) =>\r\n    ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) =>\r\n    ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) =>\r\n    ({type: 'CHANGE-TODOLIST-TITLE', id, title} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) =>\r\n    ({type: 'CHANGE-TODOLIST-FILTER', id, filter} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) =>\r\n    ({type: 'SET-TODOLISTS', todolists} as const)\r\nexport const clearTodosDataAC = () => ({type: 'CLEAR_DATA'} as const)\r\n//thunks\r\nexport const fetchTodolistsThunk = () => (dispatch: any) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTodolists().then((res) => {\r\n        dispatch(setTodolistsAC(res.data))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n        return res.data\r\n    })\r\n        .then((todos) => {\r\n            todos.forEach((tl) => {\r\n                dispatch(fetchTasksTC(tl.id))\r\n            })\r\n        })\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTodolist(title).then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n        } else {\r\n            handleServerAppError(dispatch, res.data)\r\n        }\r\n    })\r\n        .catch((err) => handleServerNetworkError(dispatch, err.message))\r\n}\r\nexport const deleteTodolistTC = (id: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodoEntityStatusAC('loading', id))\r\n    todolistsAPI.deleteTodolist(id).then((res) => {\r\n        dispatch(setAppStatusAC('succeeded'))\r\n        res.data.resultCode === 0 ? dispatch(removeTodolistAC(id))\r\n            : dispatch(setAppErrorAC(res.data.messages[0])) && dispatch(setAppStatusAC('failed'))\r\n\r\n    })\r\n        .catch((err) => handleServerNetworkError(dispatch, err.message))\r\n}\r\n\r\n//types\r\nexport type ClearDataActionType = ReturnType<typeof clearTodosDataAC>\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodolistsACType = ReturnType<typeof setTodolistsAC>\r\nexport type ChangeTodoEntityStatusType = ReturnType<typeof changeTodoEntityStatusAC>\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ActionsType =\r\n    | ChangeTodoEntityStatusType\r\n    | SetAppErrorACType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsACType\r\n    | AddTodolistActionType\r\n    | SetAppStatusACType\r\n    | ClearDataActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.disabled}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId),\r\n        [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue\r\n            ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../todolists-reducer'\r\nimport {fetchTasksTC} from \"../tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id),\r\n        [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id),\r\n        [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id),\r\n        [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.entityStatus === 'loading'}/>\r\n        <div>\r\n            {tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                             removeTask={props.removeTask}\r\n                                             changeTaskStatus={props.changeTaskStatus}/>)}\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../app/store\";\r\nimport {\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    addTodolistTC,\r\n    fetchTodolistsThunk,\r\n    FilterValuesType,\r\n    TodolistDomainType, deleteTodolistTC\r\n} from \"../../../features/todolists/todolists-reducer\";\r\nimport {addTaskTC, removeTaskTC, updateTaskStatusTC} from \"../../../features/todolists/tasks-reducer\";\r\nimport {TaskStatuses} from \"../../../api/todolists-api\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"../../../features/todolists/Todolist/Todolist\";\r\nimport {TasksStateType} from \"../../../app/App\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const TodolistsList: React.FC = (props) => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsThunk())\r\n    }, [])\r\n\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(removeTaskTC(todolistId, id))\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(addTaskTC(todolistId, title))\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(updateTaskStatusTC(todolistId, id, status))\r\n    }, []);\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        dispatch(deleteTodolistTC(id))\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const action = changeTodolistTitleAC(id, title);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const addTodolist = useCallback(function (title: string) {\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch]);\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: \"20px\"}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: \"10px\"}}>\r\n                            <Todolist\r\n                                entityStatus={tl.entityStatus}\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                filter={tl.filter}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const dispatch = useDispatch()\r\n    const error = useSelector<AppRootStateType, null | string>(state => state.app.error)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./ayth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Invalid password';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: zebych87@mail.ru</p>\r\n                        <p>Password: zebych87</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            name='email'\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email &&\r\n                        <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            name='password'\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                        <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox {...formik.getFieldProps('rememberMe')}/>}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport './App.css';\r\nimport {AppBar, Button, CircularProgress, Container, IconButton, Toolbar, Typography} from '@material-ui/core';\r\nimport LinearProgress from '@material-ui/core/LinearProgress'\r\nimport {Menu} from '@material-ui/icons';\r\nimport {TaskType} from '../api/todolists-api'\r\nimport {TodolistsList} from \"../feature/todolists/Todolist/TodolistsList\";\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {HashRouter, Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {Login} from \"../features/login/Login\";\r\nimport {logoutTC} from \"../features/login/ayth-reducer\";\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    return (\r\n        <HashRouter>\r\n            <div className=\"App\">\r\n                <AppBar position=\"static\">\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn && <Button onClick={logoutHandler} color=\"inherit\">Logout</Button>}\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Switch>\r\n                        <Route exact path={'/'} render={() => <TodolistsList/>}/>\r\n                        <Route path={'/login'} render={() => <Login/>}/>\r\n                        <Route path={'/404'}\r\n                               render={() => <h1 style={{fontSize: '50px', textAlign: 'center'}}>404: PAGE NOT\r\n                                   FOUND</h1>}/>\r\n                        <Redirect from={'*'} to={'/404'}/>\r\n                    </Switch>\r\n                </Container>\r\n                <ErrorSnackbar/>\r\n            </div>\r\n        </HashRouter>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {tasksReducer} from '../features/todolists/tasks-reducer';\r\nimport {todolistsReducer} from '../features/todolists/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from './app-reducer';\r\nimport {authReducer} from \"../features/login/ayth-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}