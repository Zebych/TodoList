{"ast":null,"code":"var _jsxFileName = \"E:\\\\incubator\\\\TodoList\\\\GitTodoList\\\\TodoList\\\\src\\\\App.tsx\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Todolist } from './Todolist';\nimport { v1 } from 'uuid';\n\nfunction App() {\n  function removeTask(id, todoListId) {\n    let tasks = allTasks[todoListId];\n    let filteredTasks = tasks.filter(t => t.id != id);\n    allTasks[todoListId] = filteredTasks;\n    setAllTasks({ ...allTasks\n    });\n  }\n\n  function addTask(title, todoListId) {\n    let task = {\n      id: v1(),\n      title: title,\n      isDone: false\n    };\n    let tasks = allTasks[todoListId];\n    allTasks[todoListId] = [task, ...tasks];\n    setAllTasks({ ...allTasks\n    });\n  }\n\n  function changeStatus(taskId, isDone, todoListId) {\n    let tasks = allTasks[todoListId];\n    let task = tasks.find(t => t.id === taskId);\n\n    if (task) {\n      task.isDone = isDone;\n    }\n\n    setAllTasks({ ...allTasks\n    });\n  }\n\n  function changeFilter(value, todoListId) {\n    let todoList = todoLists.find(t => t.id === todoListId);\n\n    if (todoList) {\n      todoList.filter = value;\n      setTodoLists([...todoLists]);\n    }\n    /*setFilter(value);*/\n\n  }\n\n  let todoListId1 = v1();\n  let todoListId2 = v1();\n  let [todoLists, setTodoLists] = useState([{\n    id: todoListId1,\n    title: \"Want \",\n    filter: \"active\"\n  }, {\n    id: todoListId2,\n    title: \"Want to\",\n    filter: \"active\"\n  }]);\n  let [allTasks, setAllTasks] = useState({\n    [todoListId1]: [{\n      id: v1(),\n      title: \"HTML&CSS\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"JS\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"ReactJS\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"Rest API\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"GraphQL\",\n      isDone: false\n    }],\n    [todoListId2]: [{\n      id: v1(),\n      title: \"Book\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"milk\",\n      isDone: true\n    }, {\n      id: v1(),\n      title: \"ReactJS\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"Rest API\",\n      isDone: false\n    }, {\n      id: v1(),\n      title: \"GraphQL\",\n      isDone: false\n    }]\n  });\n\n  const removeTodoList = todoListID => {\n    setTodoLists(todoLists.filter(tl => tl.id !== todoListID));\n    delete allTasks[todoListID];\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, todoLists.map(tl => {\n    let tasksForTodolist = allTasks[tl.id];\n\n    if (tl.filter === \"active\") {\n      tasksForTodolist = tasksForTodolist.filter(t => t.isDone === false);\n    }\n\n    if (tl.filter === \"completed\") {\n      tasksForTodolist = tasksForTodolist.filter(t => t.isDone === true);\n    }\n\n    return /*#__PURE__*/React.createElement(Todolist, {\n      key: tl.id,\n      id: tl.id,\n      title: tl.title,\n      tasks: tasksForTodolist,\n      removeTask: removeTask,\n      changeFilter: changeFilter,\n      addTask: addTask,\n      changeTaskStatus: changeStatus,\n      filter: tl.filter,\n      removeTodoList: removeTodoList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 25\n      }\n    });\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["E:/incubator/TodoList/GitTodoList/TodoList/src/App.tsx"],"names":["React","useState","Todolist","v1","App","removeTask","id","todoListId","tasks","allTasks","filteredTasks","filter","t","setAllTasks","addTask","title","task","isDone","changeStatus","taskId","find","changeFilter","value","todoList","todoLists","setTodoLists","todoListId1","todoListId2","removeTodoList","todoListID","tl","map","tasksForTodolist"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nfunction App() {\r\n\r\n    function removeTask(id: string, todoListId: string) {\r\n        let tasks = allTasks[todoListId]\r\n        let filteredTasks = tasks.filter(t => t.id != id);\r\n        allTasks[todoListId] = filteredTasks\r\n        setAllTasks({...allTasks});\r\n    }\r\n\r\n    function addTask(title: string, todoListId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        let tasks = allTasks[todoListId]\r\n        allTasks[todoListId] = [task, ...tasks];\r\n        setAllTasks({...allTasks});\r\n    }\r\n\r\n    function changeStatus(taskId: string, isDone: boolean, todoListId: string) {\r\n        let tasks = allTasks[todoListId]\r\n        let task = tasks.find(t => t.id === taskId);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n        }\r\n\r\n        setAllTasks({...allTasks});\r\n    }\r\n\r\n\r\n    function changeFilter(value: FilterValuesType, todoListId: string) {\r\n        let todoList = todoLists.find((t) => t.id === todoListId)\r\n        if (todoList) {\r\n            todoList.filter = value\r\n            setTodoLists([...todoLists])\r\n        }\r\n        /*setFilter(value);*/\r\n    }\r\n\r\n    let todoListId1 = v1()\r\n    let todoListId2 = v1()\r\n\r\n    let [todoLists, setTodoLists] = useState<Array<TodolistType>>([\r\n        {id: todoListId1, title: \"Want \", filter: \"active\"},\r\n        {id: todoListId2, title: \"Want to\", filter: \"active\"},\r\n    ])\r\n    let [allTasks, setAllTasks] = useState({\r\n            [todoListId1]: [\r\n                {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n                {id: v1(), title: \"JS\", isDone: true},\r\n                {id: v1(), title: \"ReactJS\", isDone: false},\r\n                {id: v1(), title: \"Rest API\", isDone: false},\r\n                {id: v1(), title: \"GraphQL\", isDone: false},\r\n            ],\r\n            [todoListId2]: [\r\n                {id: v1(), title: \"Book\", isDone: true},\r\n                {id: v1(), title: \"milk\", isDone: true},\r\n                {id: v1(), title: \"ReactJS\", isDone: false},\r\n                {id: v1(), title: \"Rest API\", isDone: false},\r\n                {id: v1(), title: \"GraphQL\", isDone: false},\r\n            ]\r\n        }\r\n    )\r\n    const removeTodoList = (todoListID: string) => {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        delete allTasks[todoListID]\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {\r\n                todoLists.map((tl) => {\r\n                    let tasksForTodolist = allTasks[tl.id];\r\n\r\n                    if (tl.filter === \"active\") {\r\n                        tasksForTodolist = tasksForTodolist.filter(t => t.isDone === false);\r\n                    }\r\n                    if (tl.filter === \"completed\") {\r\n                        tasksForTodolist = tasksForTodolist.filter(t => t.isDone === true);\r\n                    }\r\n                    return (\r\n                        <Todolist\r\n                            key={tl.id}\r\n                            id={tl.id}\r\n                            title={tl.title}\r\n                            tasks={tasksForTodolist}\r\n                            removeTask={removeTask}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeTaskStatus={changeStatus}\r\n                            filter={tl.filter}\r\n                            removeTodoList={removeTodoList}\r\n                        />)\r\n                })\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}